#Использовать v8storage
#Использовать v8runner
#Использовать json
#Использовать fs
#Использовать logos

Перем Лог; // протокол
Перем ВсеНастройки; // соответствие из файла настроек
Перем ИмяФайлаНастроек; // Имя файла с настройками из параметра команды
Перем ПарсерJSON;
Перем НачВремя; // Время начала работы скрипта
Перем КаталогРабочихФайлов; // Каталог, в котором создаются файлы релиза
Перем ДоступныеФорматыОтчета; // Строка с разделителями допустимых форматов отчета (не исп)
Перем текКонсоль; // Экземпляр класса Консоль
Перем НомерНачальнойВерсии; // Номер версии, с которой начинается отчет по изменениям в конфигурации
Перем ИсправительныйРелиз; // Булево. Истина, если в номере релиза есть минорная часть

Функция Версия()
	Возврат "1.0.3";
КонецФункции

Функция ПолучитьСтрокуСимволов(_с, _ч)
	_ = "";
	Для нн = 1 По _ч Цикл
		_ = _ + _с;
	КонецЦикла;
	Возврат _;
КонецФункции

Процедура ОбрезатьТаблицуПоНачальномуНомеруВерсии(ТаблицаВерсий, НомерНачальнойВерсии)
	Лог.Отладка("Удаляю все версии меньше " + НомерНачальнойВерсии + " из таблицы версий");
	мсУдаляемыеСтроки = Новый Массив;
	Для Каждого нн Из ТаблицаВерсий Цикл
		Если нн.Номер < НомерНачальнойВерсии Тогда
			мсУдаляемыеСтроки.Добавить(нн);
		КонецЕсли;
	КонецЦикла;
	Для каждого нн Из мсУдаляемыеСтроки Цикл
		ТаблицаВерсий.Удалить(нн);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьФорматированноеСообщение(Знач СобытиеЛога) Экспорт
	КартаСтатусовИУровней = Новый Соответствие;
	КартаСтатусовИУровней.Вставить(УровниЛога.Отладка, "ОТЛАДКА"); //  ОТЛАДКА
	КартаСтатусовИУровней.Вставить(УровниЛога.Информация, "   ИНФО"); //     ИНФО
	КартаСтатусовИУровней.Вставить(УровниЛога.Предупреждение, "ПРЕДУПР"); // ВНИМАНИЕ
	КартаСтатусовИУровней.Вставить(УровниЛога.Ошибка, " ОШИБКА"); //   ОШИБКА
	КартаСтатусовИУровней.Вставить(УровниЛога.КритичнаяОшибка, " КРИТИЧ"); // КРИТИЧНА
	
	Сообщение = СобытиеЛога.ПолучитьСообщение();
	УровеньСообщения = СобытиеЛога.ПолучитьУровень();
	УровеньЛога = СобытиеЛога.ПолучитьУровеньЛога();
	ДатаСобытия = СобытиеЛога.ПолучитьВремяСобытия();
	ДопПоля = СобытиеЛога.ПолучитьДополнительныеПоля();
	ИмяЛога = СобытиеЛога.ПолучитьИмяЛога();
	
	ФорматированноеСообщение = ""
		+ Формат(ТекущаяДата(), "ДФ=HH:mm:ss") + "\"
		+ Формат('00010101' + (ТекущаяДата() - НачВремя) + 1, "ДФ=HH:mm:ss") + " "
		+ КартаСтатусовИУровней[УровеньСообщения]
		+ " [" + ИмяЛога + "] " + Сообщение;
	// СформироватьФорматированныеСообщение(ДатаСобытия, УровеньСообщения,
	//                                                                 УровеньЛога, Сообщение,
	//                                                                 ДопПоля, ИмяЛога);
	Возврат ФорматированноеСообщение;
КонецФункции

Процедура Инициализировать()
	текКонсоль = Новый Консоль;
	Если АргументыКоманднойСтроки.Количество() = 0 Тогда
		Лог.Ошибка("Требуется аргумент - файл настроек");
		Возврат;
	ИначеЕсли АргументыКоманднойСтроки.Количество() = 2 Тогда
		ИмяФайлаНастроек = АргументыКоманднойСтроки[0];
		НомерНачальнойВерсии = Число(АргументыКоманднойСтроки[1]);
	Иначе
		ИмяФайлаНастроек = АргументыКоманднойСтроки[0];
		НомерНачальнойВерсии = Неопределено;
	КонецЕсли;
	
	Если Не ФС.Существует(ИмяФайлаНастроек) Тогда
		Лог.Ошибка("не найден файл настроек: " + ИмяФайлаНастроек);
		Возврат;
	КонецЕсли;
	ВсеНастройки = ПрочитатьФайлJSON(ИмяФайлаНастроек);
	Настройки = ВсеНастройки["default"];
	
	// Попытка
	Лог = Логирование.ПолучитьЛог(ИмяПроекта() + "." + ПредставлениеИБ(Настройки["ib"]));
	ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
	Лог.ДобавитьСпособВывода(ВыводПоУмолчанию, УровниЛога.Информация);
	
	// ФайлЖурнала = Новый ВыводЛогаВФайл;
	// ФайлЖурнала.ОткрытьФайл(ПутьФайлаВывода);
	// Лог.ДобавитьСпособВывода(ФайлЖурнала, УровниЛога.Отладка);
	// Лог.Отладка("Подключил вывод отладочного лога в отдельный файл %1", ПутьФайлаВывода);
	
	ВыводПротоколаВФайл = Новый ВыводЛогаВФайл;
	ВыводПротоколаВФайл.ОткрытьФайл(ОбъединитьПути("log", "storage-release." + ПредставлениеИБ(Настройки["ib"]) + ".log"));
	Лог.ДобавитьСпособВывода(ВыводПротоколаВФайл, УровниЛога.Отладка);
	// Исключение
	// Инфо = ИнформацияОбОшибке();
	// Лог.Отладка("Не смогли открыть лог в файле: " + ПодробноеПредставлениеОшибки(Инфо));
	// КонецПопытки;
	
	Лог.УстановитьУровень(УровниЛога.Отладка);
	Лог.УстановитьРаскладку(ЭтотОбъект);
	
	ДоступныеФорматыОтчета = СтрРазделить(НРег("mxl|json|xls"), "|");
	
	НачВремя = ТекущаяДата();
	
	ВывестиСтрокуЗаголовка();
КонецПроцедуры

Процедура ВывестиСтрокуЗаголовка()
	Наименование = "[ Формирование файлов релиза из хранилища конфигурации ]";
	Копирайт = " вер. " + Версия() + " | 2021@VSCraft";
	ДлинаСтроки = СтрДлина(Наименование);
	ДлинаКопирайта = СтрДлина(Копирайт);
	Попытка
		ШиринаКонсоли = текКонсоль.Ширина;
		Если ШиринаКонсоли < ДлинаСтроки - ДлинаКопирайта Тогда
			ВызватьИсключение "";
		КонецЕсли;
		ВтораяЧасть = Прав(ПолучитьСтрокуСимволов(" ", 300) + Копирайт, ШиринаКонсоли - ДлинаСтроки - 1);
	Исключение
		ШиринаКонсоли = 80;
		ВтораяЧасть = " " + Копирайт;
	КонецПопытки;
	Сообщить(Наименование + ВтораяЧасть);
	Лог.Информация(ПолучитьСтрокуСимволов("`", ШиринаКонсоли - 48));
КонецПроцедуры

Функция КаталогПроекта()
	Инфо = ИнформацияОбОшибке();
	ФайлИсточника = Новый Файл(СтартовыйСценарий().Источник);
	Лог.Отладка("Определил каталог проекта как " + ФайлИсточника.Путь);
	Возврат ФайлИсточника.Путь;
КонецФункции

Функция ИмяПроекта()
	// ФайлИсточника = Новый Файл(СтартовыйСценарий().Источник);
	Возврат "storage.CF";
КонецФункции

Процедура ЗаписатьИзмененияВНастройки(НомерВерсии, НомерКонВерсии, НомерРелиза)
	Лог.Отладка("Записываю измененные параметры в файл настроек");
	ВсеНастройки["default"].Вставить("version", НомерВерсии);
	ВсеНастройки["default"].Вставить("version-last", НомерКонВерсии);
	ВсеНастройки["default"].Вставить("release", НомерРелиза);
	СтрокаДляЗаписи = ПарсерJSON.ЗаписатьJSON(ВсеНастройки);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНастроек);
	ЗаписьТекста.ЗаписатьСтроку(СтрокаДляЗаписи);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

Функция ПрочитатьФайл(Знач ИмяФайла, Знач Кодировка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Чтение = Новый ЧтениеТекста(ИмяФайла, Кодировка, , , Ложь);
	Результат = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат Результат;
КонецФункции

Функция ПрочитатьФайлJSON(Знач ИмяФайла) Экспорт
	
	ФайлСуществующий = Новый Файл(ИмяФайла);
	Если Не ФайлСуществующий.Существует() Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	JsonСтрока = ПрочитатьФайл(ИмяФайла);
	
	ПарсерJSON = Новый ПарсерJSON();
	Результат = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьФайлJSON(ИмяФайла, Значение)
	
	Лог.Отладка("Записываю объект настроек в json файл " + ИмяФайла);
	
	ФайлСуществующий = Новый Файл(ИмяФайла);
	
	ПарсерJSON = Новый ПарсерJSON();
	JsonСтрока = ПарсерJSON.ЗаписатьJSON(Значение);
	Запись = Новый ЗаписьТекста(ИмяФайла);
	Запись.Записать(JsonСтрока);
	Запись.Закрыть();
	Возврат Истина;
КонецФункции

Процедура ПреобразоватьФайлОтчета(УправлениеКонфигуратором, ИмяФайлаОтчета, ИмяФайлаНовогоОтчета, ФорматФайлаОтчета)
	Лог.Отладка("Преобразую " + ИмяФайлаОтчета + " в " + ИмяФайлаНовогоОтчета + " в формате """ + ФорматФайлаОтчета + """");
	
	Если ДоступныеФорматыОтчета.Найти(НРег(ФорматФайлаОтчета)) = Неопределено Тогда
		Лог.Ошибка("!!! Неподдерживаемый формат отчета: " + ФорматФайлаОтчета);
		Возврат;
	Иначе
		ФорматФайлаОтчета = НРег(ФорматФайлаОтчета);
	КонецЕсли;
	
	Если ФорматФайлаОтчета = "json" Тогда
		КлючЗапуска = СтрШаблон("""%1;%2""", ИмяФайлаОтчета, ИмяФайлаНовогоОтчета);
		ПараметрыЗапускаОбработки = СтрШаблон("/Execute ""%1""", "src\ОбработкаКонвертацииMXLJSON.epf");
		УправлениеКонфигуратором.ЗапуститьВРежимеПредприятия(КлючЗапуска, Ложь, ПараметрыЗапускаОбработки);
	ИначеЕсли ФорматФайлаОтчета = "xls" Тогда
		Лог.Информация("!!! Формат отчета: """ + ФорматФайлаОтчета + """ еще не реализован");
	ИначеЕсли ФорматФайлаОтчета = "mxl" Тогда
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеНужныеНастройкиУказаны(Настройки)
	Лог.Отладка("Проверяю все ли настройки присутствуют в файле настроек");
	
	ИспользуемыеНастройки = СтрРазделить(
			"release,ib,work-folder,--v8version,--storage-name"
			+ ",--storage-user,--storage-pwd"
			+ ",report-format,version,version-last,extension"
			, ",");
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Для Каждого ИмяНастройки Из ИспользуемыеНастройки Цикл
			Если Настройки.Получить(ИмяНастройки) = Неопределено Тогда
				Лог.Ошибка("!!! В файле " + ИмяФайлаНастроек + " отсутствует настройка """ + ИмяНастройки + """");
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("Структура") Тогда
		Для Каждого ИмяНастройки Из ИспользуемыеНастройки Цикл
			Если Не Настройки.Свойство(ИмяНастройки) Тогда
				Лог.Ошибка("!!! В файле " + ИмяФайлаНастроек + " отсутствует настройка """ + ИмяНастройки + """");
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Лог.Ошибка("!!! Неизвестный тип настроек: """ + ТипЗнч(Настройки) + """ из файла " + ИмяФайлаНастроек + "");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПредставлениеНомераРелиза(
		МажорнаяЧасть
		, МинорнаяЧасть = 0
		, ДлинаМажорнойЧасти = 4
		, ДлинаМинорнойЧасти = 2
	)
	Если МинорнаяЧасть = 0 Тогда
		Возврат Прав("000000" + Строка(МажорнаяЧасть), ДлинаМажорнойЧасти);
	Иначе
		Возврат ПредставлениеНомераРелиза(МажорнаяЧасть) + "." + Прав("000000" + Строка(МинорнаяЧасть), ДлинаМинорнойЧасти);;
	КонецЕсли;
КонецФункции

Функция ПредставлениеИБ(ИБ)
	Возврат СтрЗаменить(ИБ, "mc_", "");
КонецФункции

Функция ПолучитьСтрокуСледующегоРелиза(СтрокаТекущегоРелиза)
	Лог.Отладка("Определяю строку следующего релиза для """ + СтрокаТекущегоРелиза + """");
	МассивЧастей = СтрРазделить(СтрокаТекущегоРелиза, ".");
	Лог.Отладка("Разделил строку текущей версии на " + МассивЧастей.Количество() + " частей");
	
	Если МассивЧастей.Количество() = 1 Тогда // строка состоит только из мажорной части
		ИсправительныйРелиз = Ложь;
		НомерСледующегоРелиза = Число(СтрокаТекущегоРелиза) + 1;
		Возврат ПредставлениеНомераРелиза(НомерСледующегоРелиза);
	Иначе
		ИсправительныйРелиз = Истина;
		МажорнаяЧастьНомера = Число(МассивЧастей[0]);
		МинорнаяЧастьНомера = ?(ПустаяСтрока(МассивЧастей[1]), 1, 1 + Число(МассивЧастей[1]));
		Лог.Отладка("Определил части номера следующего релиза мажор: " + МажорнаяЧастьНомера + " минор: " + МинорнаяЧастьНомера + "");
		Возврат ПредставлениеНомераРелиза(МажорнаяЧастьНомера, МинорнаяЧастьНомера);
	КонецЕсли;
	Лог.Ошибка("Не удалось изменить строку релиза, возвращаю текущую """ + СтрокаТекущегоРелиза + """");
	Возврат СтрокаТекущегоРелиза;
КонецФункции

Процедура ПолучитьОтчет()
	Настройки = ВсеНастройки["default"];
	СтрокаТекущегоРелиза = ПолучитьСтрокуСледующегоРелиза(Настройки["release"]);
	Если Не ВсеНужныеНастройкиУказаны(Настройки) Тогда
		Возврат;
	КонецЕсли;
	РежимРасширение = ЗначениеЗаполнено(Настройки["extension"]);
	ИмяИБ = ПредставлениеИБ(Настройки["ib"]);
	
	РабочийКаталог = Настройки["work-folder"];
	
	КаталогРабочихФайлов = ОбъединитьПути(РабочийКаталог, ИмяИБ, СтрокаТекущегоРелиза);
	ФС.ОбеспечитьКаталог(КаталогРабочихФайлов);
	
	АдресКаталогаВременнойИБ =  "v8_tmp_" + ИмяИб;
	НомерКонВерсии = 9999;
	Лог.Отладка("Получаю настройки конфигуратора с вер." + Настройки["--v8version"]);
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(Настройки["--v8version"]);
	УправлениеКонфигуратором.СоздатьФайловуюБазу("/F" + АдресКаталогаВременнойИБ);
	
	Лог.Информация("Каталог временной базы: " + АдресКаталогаВременнойИБ);
	УправлениеКонфигуратором.УстановитьКонтекст("/F" + АдресКаталогаВременнойИБ, "", "");
	Если РежимРасширение Тогда
		УправлениеКонфигуратором.СоздатьФайловуюБазу("v8tmp" + ИмяИб);
		ХранилищеР = Новый МенеджерХранилищаКонфигурации( , УправлениеКонфигуратором);
		ХранилищеР.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
		ХранилищеР.УстановитьПутьКХранилищу(Настройки["--storage-name"]);
		ХранилищеР.УстановитьРасширениеХранилища(Настройки["extension"]);
		ХранилищеР.ПодключитьсяКХранилищу(Истина, Истина);
		УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь, Настройки["extension"]);
		УправлениеКонфигуратором.ВыгрузитьРасширениеВФайл();
	Иначе
		Лог.Информация("Подключаю временную ИБ к хранилищу конфигурации """ + ИмяИБ + """");
		Лог.Отладка("Соединяюсь с хранилищем конфигурации " + Настройки["--storage-name"]);
		ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации( , УправлениеКонфигуратором);
		ХранилищеКонфигурации.УстановитьПутьКХранилищу(Настройки["--storage-name"]);
		ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Настройки["--storage-user"], Настройки["--storage-pwd"]);
		ХранилищеКонфигурации.ПрочитатьХранилище();

		Лог.Информация("Получаю таблицы авторов и версий");
		Лог.Отладка("Получаю таблицу версий ");
		ТаблицаВерсий = ХранилищеКонфигурации.ПолучитьТаблицуВерсий();
		Попытка
			НомерНачВерсииИзКонфФайла = Настройки["version"];
		Исключение
			НомерНачВерсииИзКонфФайла = 1;
		КонецПопытки;
		Попытка
			НомКонВерсииИзКонфФайла = Настройки["version-last"];
		Исключение
			НомКонВерсииИзКонфФайла = 1;
		КонецПопытки;
		
		Если НомерНачВерсииИзКонфФайла > 1 Тогда
			ОбрезатьТаблицуПоНачальномуНомеруВерсии(ТаблицаВерсий, НомерНачВерсииИзКонфФайла);
		КонецЕсли;
		Лог.Отладка("Получаю массив авторов ");
		МассивАвторов = ХранилищеКонфигурации.ПолучитьАвторов();
		
		Если ТаблицаВерсий.Количество() = 0 Тогда
			НомПоследнейВерсииВХранилище = НомКонВерсииИзКонфФайла;
		Иначе
			НомПоследнейВерсииВХранилище = ТаблицаВерсий[ТаблицаВерсий.Количество() - 1].Номер;
		КонецЕсли;
		
		ПостфиксИмениФайла = ИмяИБ + "_" + СтрокаТекущегоРелиза + "_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
		СтрокаДиапазонаВерсий = "_[" + НомерНачВерсииИзКонфФайла + "-" + НомПоследнейВерсииВХранилище + "]";
		
		ИмяФайлаАвторов = ОбъединитьПути(КаталогРабочихФайлов, ПостфиксИмениФайла 
			+ СтрокаДиапазонаВерсий + ".AUTHORS" + ".json");
		ИмяФайлаВерсий = ОбъединитьПути(КаталогРабочихФайлов, ПостфиксИмениФайла + СтрокаДиапазонаВерсий + ".VERS" + ".json");
		ИмяФайлаРелиза = ОбъединитьПути(КаталогРабочихФайлов, ПостфиксИмениФайла + ?(РежимРасширение, ".cfe", ".cf"));
		ИмяФайлаОтчета = ОбъединитьПути(КаталогРабочихФайлов, ПостфиксИмениФайла + ?(РежимРасширение, "_ext", "")
				+ "" + СтрокаДиапазонаВерсий + ".REPORT" + ".mxl");
		
		ЗаписатьФайлJSON(ИмяФайлаАвторов, МассивАвторов);
		ЗаписатьФайлJSON(ИмяФайлаВерсий, ТаблицаВерсий);
		Лог.Информация("Выгружаю CF-файл релиза из хранилища в файл " + ИмяФайлаРелиза);
		Если РежимРасширение Тогда
			ХранилищеКонфигурации.УстановитьРасширениеХранилища("грРасширениеЗУП");
		КонецЕсли;
		ХранилищеКонфигурации.СохранитьВерсиюКонфигурацииВФайл( , ИмяФайлаРелиза);
		Если РежимРасширение Тогда
			Лог.Информация("Формирую отчет по версиям. с " + НомерНачВерсииИзКонфФайла + " по " 
				+ НомПоследнейВерсииВХранилище + " в " + ИмяФайлаОтчета);
			ХранилищеКонфигурации.ПолучитьОтчетПоВерсиям(ИмяФайлаОтчета
				, НомерНачВерсииИзКонфФайла, НомПоследнейВерсииВХранилище);
		Иначе
			Лог.Информация("Формирую отчет по версиям. с " + НомКонВерсииИзКонфФайла + " по " 
				+ НомПоследнейВерсииВХранилище + " в " + ИмяФайлаОтчета);
			ХранилищеКонфигурации.ПолучитьОтчетПоВерсиям(ИмяФайлаОтчета
				, НомКонВерсииИзКонфФайла, НомПоследнейВерсииВХранилище);
		КонецЕсли;

		Если НомерНачВерсииИзКонфФайла = НомПоследнейВерсииВХранилище Тогда
			Лог.Предупреждение("В релиз не вошли никакие изменения");
		КонецЕсли;
	КонецЕсли;
	Лог.Отладка("Переформатирую отчет в `json`");
	ФайлНовогоОтчета = Новый Файл(ИмяФайлаОтчета);
	ИмяФайлаНовогоОтчета = ОбъединитьПути(КаталогРабочихФайлов, ФайлНовогоОтчета.ИмяБезРасширения + ".json");
	
	Если Не ПустаяСтрока(Настройки["report-format"]) Тогда
		ПреобразоватьФайлОтчета(УправлениеКонфигуратором, ИмяФайлаОтчета, ИмяФайлаНовогоОтчета, Настройки["report-format"]);
	КонецЕсли;
	Если ИсправительныйРелиз Тогда // В каждый отчет по испр. релизу включать все изменения с начала исправлений
		НомерНачВер = НомерНачВерсииИзКонфФайла;
	Иначе
		НомерНачВер = НомКонВерсииИзКонфФайла;
	КонецЕсли;
	НомерКонВер = НомПоследнейВерсииВХранилище;

	ЗаписатьИзмененияВНастройки(НомерНачВер, НомерКонВер, СтрокаТекущегоРелиза);
	Лог.Отладка("Удаляю временные файлы из " + АдресКаталогаВременнойИБ);
	УдалитьФайлы(АдресКаталогаВременнойИБ);
	Лог.Информация("Завершено");
	Лог.Закрыть();
КонецПроцедуры

// ************************************************************** //
ИсправительныйРелиз = Ложь;
Инициализировать();
ПолучитьОтчет();
